@prefix : <urn:example:> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix graph: <http://www.w3.org/2000/10/swap/graph#> .
@prefix list: <http://www.w3.org/2000/10/swap/list#> .
@prefix math: <http://www.w3.org/2000/10/swap/math#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .

# defs
(_:What) log:onNegativeSurface {
    () :obligation _:What .
    () log:onNegativeSurface {
        :world :contains {
            () :box _:What
        } .
    } .
} .

(_:What) log:onNegativeSurface {
    () log:onNegativeSurface {
        () :obligation _:What .
    } .

    () log:onNegativeSurface {
        :world :contains {
            () log:onNegativeSurface {
                () :box _:What .
            } .
        } .
    } .
} .

(_:What) log:onNegativeSurface {
    () :permission _:What .
    
    () log:onNegativeSurface {
        :world :contains {
            () log:onNegativeSurface {
                () :box {
                    () log:onNegativeSurface _:What .
                } .
            } .
        } .
    } .
} .

(_:What) log:onNegativeSurface {
    () log:onNegativeSurface {
        () :permission _:What .
    } .
    
    () log:onNegativeSurface {
        :world :contains {
            () :box {
                () log:onNegativeSurface _:What .
            } .
        } .
    } .
} .

(_:What) log:onNegativeSurface {
    () :prohibition _:What .
    () log:onNegativeSurface {
        :world :contains {
            () :box {
                () log:onNegativeSurface _:What .
            } .
        } .
    } .
} .

(_:What) log:onNegativeSurface {
    () log:onNegativeSurface {
        () :prohibition _:What .
    } .

    () log:onNegativeSurface {
        :world :contains {
            () log:onNegativeSurface {
                () :box {
                    () log:onNegativeSurface _:What .
                } .
            } .
        } .
    } .
} .

# k4 : []p v []q -> [](p v q)
(_:N _:L _:M _:G _:Sc) log:onNegativeSurface {
    () log:onNegativeSurface _:N .

    (_:G { 
        _:N log:includes { 
            () log:onNegativeSurface {
                :world :contains {
                    () :box _:G .
                }.
            } .
        }
    } _:L) log:collectAllIn _:Sc .

    _:L list:member _:M .

    () log:onNegativeSurface {
        _:L :part {
            () log:onNegativeSurface _:M .
        } .

        (_:P _:C _:Sc _:U _:CN) log:onNegativeSurface {
            (_:P { _:L :part _:P} _:C) log:collectAllIn _:Sc .
            _:C list:length _:CN .
            _:CN math:greaterThan 1 .
            _:C graph:union _:U .
            () log:onNegativeSurface {
                :world :contains {
                    () :box {
                        () log:onNegativeSurface _:U .
                    }
                } .
            } .
        }
    } .
} .

# query
(_:What _:What2 _:L _:M _:N _:Len _:G _:Sc _:Sc2) log:onNegativeSurface {
    ( _:What { :world :contains _:What . } _:L ) log:collectAllIn _:Sc .
    ( { :next_world :contains _:What2 } { :next_world :contains _:What2 } _:M ) log:collectAllIn _:Sc2 .
    ( _:L _:M ) list:append _:N . 
    _:N list:length _:Len .
    _:Len log:notEqualTo 0.
    _:G graph:list _:N .
    () log:onNegativeAnswerSurface _:G .
} .

